Öğrenci No:250541616
AD-SOYAD:Enes Zukra
ŞUBE:1-B

Lütfen seçtiğiniz algoritmaya ait çözümü ve diğer isterleri aşağıya ekleyiniz:
( ALGORİTMA Optimum_Butceli_Alisveris )

PSUEDOCODE (Adım Adım) 

GİRDİ:
    butce ← kullanıcıdan alınan toplam bütçe
    urun_listesi ← [ {isim, fiyat, oncelik}, ... ]

ÇIKTI:
    sepetteki_urunler ← alınan ürünlerin listesi
    kalan_butce ← bütçeden arta kalan miktar

BAŞLA

1. sepetteki_urunler ← boş liste
2. urun_listesi ← oncelik artan sırada sırala
   (öncelik 1 → önce, 3 → en sonra)
3. Aynı öncelikte olan ürünleri fiyat artan sıraya göre sırala

4. HER urun ∈ urun_listesi İÇİN TEKRAR ET
       EĞER urun.fiyat ≤ butce İSE
           sepetteki_urunler'e urun'u EKLE
           butce ← butce - urun.fiyat
       DEĞİLSE
           "Bütçe bu ürün için yeterli değil" yaz
       SON
       EĞER butce ≤ 0 İSE
           DÖNGÜDEN ÇIK
       SON
   SON

5. kalan_butce ← butce

6. "Alınan ürünler:" yaz
   HER urun ∈ sepetteki_urunler İÇİN
       urun.isim ve urun.fiyat yaz
   SON

7. "Kalan bütçe:" kalan_butce yaz

BİTİR



FARKLI ÇÖZÜM VERSİYONLARININ KARŞILAŞTIRMASI



1. Sıralı Kontrol Algoritması: 
   Ürünler sırayla değerlendirilir. Küçük veri kümelerinde etkili, ancak büyük listelerde yavaştır.  

2. Fiyat/Performans Öncelikli Seçim: 
   Ürünleri fiyat/kalite oranına göre sıralar. Daha mantıklı seçimler yapılır,  
   ancak ek hesaplama gerekir.

3. Dinamik Programlama (Knapsack Yaklaşımı):
   En optimum bütçe kullanımını sağlar. Matematiksel olarak en doğru sonuç verir,  
   ama manuel olarak uygulanması zordur.

LLM İLE KONUŞMA GEÇMİŞİ

“[Optimum Bütçeli Market Alışverişi Algoritması] için adım adım algoritma geliştirmek istiyorum. 
Koşullu durumları ve tekrar eden işlemleri de içeren detaylı bir pseudocode yazmama yardım eder misin?”


Tabii ki! 🌟
Aşağıda “Optimum Bütçeli Market Alışverişi Algoritması” için adım adım düşüneceğimiz bir pseudocode (sözde kod) örneği paylaşıyorum.
Bu algoritma, sınırlı bir bütçeyle market alışverişi yaparken ihtiyaç önceliğine göre en uygun ürünleri seçmeyi amaçlar.
Koşullar (if–else) ve döngüler (for–while) dahil edilmiştir.

